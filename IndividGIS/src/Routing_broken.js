class RouteController {
    constructor(map) {
        this.map = map;
        this.routeLayer = L.layerGroup().addTo(map);
        this.markersLayer = L.layerGroup().addTo(map);
        this.activeInput = null;
        this.fromCoords = null;
        this.toCoords = null;
        this.viaCoords = [];
        this.routingControl = null;
        this.isPickingPoint = false;
        
        this.initElements();
        this.initEvents();
        this.initMapClickHandler();
        
        console.log('‚úÖ RouteController –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    initElements() {
        this.routeFrom = document.getElementById('routeFrom');
        this.routeTo = document.getElementById('routeTo');
        this.routeInfo = document.getElementById('routeInfo');
        this.routeSummary = document.getElementById('routeSummary');
        this.routeSteps = document.getElementById('routeSteps');
        this.calculateBtn = document.getElementById('calculateRoute');
        this.viaPointsContainer = document.getElementById('viaPoints');
        this.addViaBtn = document.getElementById('addViaPoint');
        
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–æ—á–µ–∫
        this.createPickerButtons();
        
        console.log('‚úÖ –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }

    createPickerButtons() {
        // –û–±–µ—Ä—Ç—ã–≤–∞–µ–º input'—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
        this.wrapInputWithPicker(this.routeFrom, 'from', 'üöÄ –í—ã–±—Ä–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ');
        this.wrapInputWithPicker(this.routeTo, 'to', 'üèÅ –í—ã–±—Ä–∞—Ç—å –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ');
    }

    wrapInputWithPicker(input, type, title) {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        const container = document.createElement('div');
        container.className = 'route-input-container';
        
        // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤–º–µ—Å—Ç–æ input
        input.parentNode.insertBefore(container, input);
        
        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º input –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        container.appendChild(input);
        
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞
        const pickerBtn = document.createElement('button');
        pickerBtn.className = 'route-picker-btn';
        pickerBtn.innerHTML = 'üìç';
        pickerBtn.title = title;
        pickerBtn.type = 'button';
        
        container.appendChild(pickerBtn);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É
        pickerBtn.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            this.startPickingPoint(type, pickerBtn);
        });
        
        return pickerBtn;
    }

    startPickingPoint(type, button) {
        console.log(`üéØ –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–±–æ—Ä —Ç–æ—á–∫–∏ –¥–ª—è: ${type}`);
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∂–∏–º –≤—ã–±–æ—Ä–∞
        this.resetPickingMode();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ä–µ–∂–∏–º
        this.activeInput = type;
        this.isPickingPoint = true;
        
        // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        button.classList.add('active');
        button.style.backgroundColor = '#4CAF50';
        button.style.color = 'white';
        
        // –ò–∑–º–µ–Ω—è–µ–º –∫—É—Ä—Å–æ—Ä –∫–∞—Ä—Ç—ã
        this.map.getContainer().style.cursor = 'crosshair';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        this.showPickingTooltip(type);
    }

    resetPickingMode() {
        this.isPickingPoint = false;
        this.activeInput = null;
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∏–ª–∏ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
        document.querySelectorAll('.route-picker-btn').forEach(btn => {
            btn.classList.remove('active');
            btn.style.backgroundColor = '';
            btn.style.color = '';
        });
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä
        this.map.getContainer().style.cursor = '';
        
        // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        this.hidePickingTooltip();
    }

    showPickingTooltip(type) {
        const typeText = type === 'from' ? '–Ω–∞—á–∞–ª—å–Ω—É—é' : '–∫–æ–Ω–µ—á–Ω—É—é';
        const popup = L.popup()
            .setLatLng(this.map.getCenter())
            .setContent(`
                <div style="text-align: center; padding: 10px;">
                    <h4>üéØ –í—ã–±–µ—Ä–∏—Ç–µ ${typeText} —Ç–æ—á–∫—É</h4>
                    <p>–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç–µ, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—á–∫—É –º–∞—Ä—à—Ä—É—Ç–∞</p>
                    <button onclick="window.routeController.resetPickingMode()" 
                            style="padding: 5px 10px; background: #f44336; color: white; border: none; border-radius: 3px; cursor: pointer;">
                        ‚ùå –û—Ç–º–µ–Ω–∞
                    </button>
                </div>
            `)
            .openOn(this.map);
            
        this.pickingTooltip = popup;
    }

    hidePickingTooltip() {
        if (this.pickingTooltip) {
            this.map.closePopup(this.pickingTooltip);
            this.pickingTooltip = null;
        }
    }

    initMapClickHandler() {
        this.map.on('click', (e) => {
            if (this.isPickingPoint && this.activeInput) {
                console.log(`üìç –¢–æ—á–∫–∞ –≤—ã–±—Ä–∞–Ω–∞ –¥–ª—è ${this.activeInput}:`, e.latlng);
                this.setPointFromMap(e.latlng);
                this.resetPickingMode();
            }
        });
    }

    async setPointFromMap(latlng) {
        console.log('üîç –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:', latlng);
        
        try {
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å
            const response = await fetch(
                `https://nominatim.openstreetmap.org/reverse?format=json&lat=${latlng.lat}&lon=${latlng.lng}&zoom=18&addressdetails=1`
            );
            const data = await response.json();
            const address = data.display_name || `${latlng.lat.toFixed(6)}, ${latlng.lng.toFixed(6)}`;
            
            this.setPoint(this.activeInput, latlng, address);
            console.log('‚úÖ –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω:', address);
            
        } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:', error);
            const coordsStr = `${latlng.lat.toFixed(6)}, ${latlng.lng.toFixed(6)}`;
            this.setPoint(this.activeInput, latlng, coordsStr);
        }
    }

    setPoint(type, coords, displayName = '') {
        console.log(`üìå –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—á–∫—É ${type}:`, coords, displayName);
        
        if (type === 'from') {
            this.fromCoords = coords;
            this.routeFrom.value = displayName || `${coords.lat.toFixed(6)}, ${coords.lng.toFixed(6)}`;
            this.addMarker(coords, 'start', 'üöÄ –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞');
        } else if (type === 'to') {
            this.toCoords = coords;
            this.routeTo.value = displayName || `${coords.lat.toFixed(6)}, ${coords.lng.toFixed(6)}`;
            this.addMarker(coords, 'end', 'üèÅ –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞');
        }
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç—Ä–æ–∏–º –º–∞—Ä—à—Ä—É—Ç –µ—Å–ª–∏ –µ—Å—Ç—å –æ–±–µ —Ç–æ—á–∫–∏
        if (this.fromCoords && this.toCoords) {
            this.calculateRoute();
        }
    }

    // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    setStartPoint(lat, lng) {
        const coords = L.latLng(lat, lng);
        this.setPoint('from', coords, `–ú–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (${lat.toFixed(6)}, ${lng.toFixed(6)})`);
    }

    setEndPoint(lat, lng) {
        const coords = L.latLng(lat, lng);
        this.setPoint('to', coords, `–í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–æ—á–∫–∞ (${lat.toFixed(6)}, ${lng.toFixed(6)})`);
    }

    addMarker(coords, type, popupText) {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–∞—Ä–∫–µ—Ä —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
        this.markersLayer.eachLayer(layer => {
            if (layer.markerType === type) {
                this.markersLayer.removeLayer(layer);
            }
        });

        let iconColor = type === 'start' ? 'green' : 'red';
        let iconUrl = `https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-${iconColor}.png`;

        const marker = L.marker(coords, {
            icon: L.icon({
                iconUrl: iconUrl,
                iconSize: [25, 41],
                iconAnchor: [12, 41],
                popupAnchor: [1, -34]
            })
        });
        
        marker.markerType = type;
        marker.bindPopup(popupText);
        this.markersLayer.addLayer(marker);
        
        console.log(`‚úÖ –ú–∞—Ä–∫–µ—Ä ${type} –¥–æ–±–∞–≤–ª–µ–Ω`);
    }

    initEvents() {
        this.calculateBtn.addEventListener('click', () => {
            console.log('üîÑ –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞–∂–∞—Ç–∞');
            this.calculateRoute();
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤—Ä—É—á–Ω—É—é
        this.routeFrom.addEventListener('change', () => this.parseInputCoords('from'));
        this.routeTo.addEventListener('change', () => this.parseInputCoords('to'));
        
        // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π —Ç–æ—á–∫–∏
        this.addViaBtn.addEventListener('click', () => this.addViaPoint());
        
        console.log('‚úÖ –°–æ–±—ã—Ç–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }

    parseInputCoords(type) {
        const input = type === 'from' ? this.routeFrom : this.routeTo;
        const value = input.value.trim();
        
        // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        const coordPattern = /^(-?\d+\.?\d*),\s*(-?\d+\.?\d*)$/;
        const match = value.match(coordPattern);
        
        if (match) {
            const lat = parseFloat(match[1]);
            const lng = parseFloat(match[2]);
            
            if (lat >= -90 && lat <= 90 && lng >= -180 && lng <= 180) {
                const coords = L.latLng(lat, lng);
                console.log(`üìù –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–≤–µ–¥–µ–Ω—ã –≤—Ä—É—á–Ω—É—é –¥–ª—è ${type}:`, coords);
                
                if (type === 'from') {
                    this.fromCoords = coords;
                    this.addMarker(coords, 'start', 'üöÄ –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞');
                } else {
                    this.toCoords = coords;
                    this.addMarker(coords, 'end', 'üèÅ –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞');
                }
                
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç—Ä–æ–∏–º –º–∞—Ä—à—Ä—É—Ç –µ—Å–ª–∏ –µ—Å—Ç—å –æ–±–µ —Ç–æ—á–∫–∏
                if (this.fromCoords && this.toCoords) {
                    this.calculateRoute();
                }
            }
        }
    }

    async calculateRoute() {
        if (!this.fromCoords || !this.toCoords) {
            this.routeInfo.innerHTML = `
                <div style="padding: 15px; text-align: center; color: #f44336;">
                    <h4>‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö</h4>
                    <p>–£–∫–∞–∂–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –∏ –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞</p>
                </div>
            `;
            return;
        }

        console.log('üöó –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á–µ—Ç –º–∞—Ä—à—Ä—É—Ç–∞ –æ—Ç', this.fromCoords, '–¥–æ', this.toCoords);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        this.routeInfo.innerHTML = `
            <div style="padding: 20px; text-align: center;">
                <div style="font-size: 24px; margin-bottom: 10px;">üîÑ</div>
                <h4>–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞...</h4>
                <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ</p>
            </div>
        `;

        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenRouteService API (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)
            const response = await fetch(
                `https://api.openrouteservice.org/v2/directions/driving-car?api_key=5b3ce3597851110001cf6248d7bb46f0fc264cb7bfd0f8b3e5cf47e8&start=${this.fromCoords.lng},${this.fromCoords.lat}&end=${this.toCoords.lng},${this.toCoords.lat}`
            );
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }
            
            const data = await response.json();
            console.log('‚úÖ –ú–∞—Ä—à—Ä—É—Ç –ø–æ–ª—É—á–µ–Ω:', data);
            
            this.displayRoute(data);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞:', error);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É
            this.routeInfo.innerHTML = `
                <div style="padding: 15px; text-align: center; color: #f44336;">
                    <h4>‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞</h4>
                    <p>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–∏—Å—É –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏</p>
                    <div style="margin-top: 15px; padding: 10px; background: #f5f5f5; border-radius: 5px;">
                        <h5>–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:</h5>
                        <button onclick="window.open('https://www.google.com/maps/dir/${this.fromCoords.lat},${this.fromCoords.lng}/${this.toCoords.lat},${this.toCoords.lng}', '_blank')" 
                                style="padding: 5px 10px; margin: 2px; background: #4285f4; color: white; border: none; border-radius: 3px; cursor: pointer;">
                            üó∫Ô∏è Google Maps
                        </button>
                        <button onclick="window.open('https://yandex.ru/maps/?rtext=${this.fromCoords.lat},${this.fromCoords.lng}~${this.toCoords.lat},${this.toCoords.lng}&rtt=auto', '_blank')" 
                                style="padding: 5px 10px; margin: 2px; background: #fc3; color: black; border: none; border-radius: 3px; cursor: pointer;">
                            üü° –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã
                        </button>
                    </div>
                </div>
            `;
            
            // –†–∏—Å—É–µ–º –ø—Ä—è–º—É—é –ª–∏–Ω–∏—é –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
            this.drawStraightLine();
        }
    }

    displayRoute(data) {
        if (!data.features || data.features.length === 0) {
            throw new Error('–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        const route = data.features[0];
        const coordinates = route.geometry.coordinates;
        const properties = route.properties;
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–∞—Ä—à—Ä—É—Ç
        this.routeLayer.clearLayers();
        
        // –†–∏—Å—É–µ–º –º–∞—Ä—à—Ä—É—Ç –Ω–∞ –∫–∞—Ä—Ç–µ
        const routeLine = L.polyline(
            coordinates.map(coord => [coord[1], coord[0]]), // –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º lng,lat –≤ lat,lng
            {
                color: '#2196F3',
                weight: 5,
                opacity: 0.8
            }
        );
        
        this.routeLayer.addLayer(routeLine);
        
        // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –º–∞—Ä—à—Ä—É—Ç
        this.map.fitBounds(routeLine.getBounds(), {
            padding: [20, 20]
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä—à—Ä—É—Ç–µ
        const distance = (properties.summary.distance / 1000).toFixed(1);
        const duration = Math.round(properties.summary.duration / 60);
        
        this.routeInfo.innerHTML = `
            <div style="padding: 15px;">
                <h4 style="color: #2196F3; margin: 0 0 15px 0;">üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω!</h4>
                <div style="background: #f5f5f5; padding: 10px; border-radius: 5px; margin-bottom: 15px;">
                    <p style="margin: 5px 0;"><strong>üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:</strong> ${distance} –∫–º</p>
                    <p style="margin: 5px 0;"><strong>‚è±Ô∏è –í—Ä–µ–º—è –≤ –ø—É—Ç–∏:</strong> ${duration} –º–∏–Ω</p>
                </div>
                <div style="display: flex; gap: 5px; flex-wrap: wrap;">
                    <button onclick="window.routeController.clearRoute()" 
                            style="padding: 8px 12px; background: #f44336; color: white; border: none; border-radius: 3px; cursor: pointer; font-size: 12px;">
                        üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å
                    </button>
                    <button onclick="window.open('https://www.google.com/maps/dir/${this.fromCoords.lat},${this.fromCoords.lng}/${this.toCoords.lat},${this.toCoords.lng}', '_blank')" 
                            style="padding: 8px 12px; background: #4285f4; color: white; border: none; border-radius: 3px; cursor: pointer; font-size: 12px;">
                        üì± Google Maps
                    </button>
                </div>
            </div>
        `;
        
        console.log('‚úÖ –ú–∞—Ä—à—Ä—É—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω –Ω–∞ –∫–∞—Ä—Ç–µ');
    }

    drawStraightLine() {
        // –†–∏—Å—É–µ–º –ø—Ä—è–º—É—é –ª–∏–Ω–∏—é –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
        this.routeLayer.clearLayers();
        
        const line = L.polyline([this.fromCoords, this.toCoords], {
            color: '#FF9800',
            weight: 3,
            opacity: 0.7,
            dashArray: '10, 10'
        });
        
        this.routeLayer.addLayer(line);
        
        // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É
        this.map.fitBounds(line.getBounds(), {
            padding: [20, 20]
        });
        
        // –°—á–∏—Ç–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
        const distance = (this.fromCoords.distanceTo(this.toCoords) / 1000).toFixed(1);
        
        this.routeInfo.innerHTML = `
            <div style="padding: 15px;">
                <h4 style="color: #FF9800; margin: 0 0 15px 0;">üìè –ü—Ä—è–º–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ</h4>
                <div style="background: #fff3e0; padding: 10px; border-radius: 5px; margin-bottom: 15px;">
                    <p style="margin: 5px 0;"><strong>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ –ø—Ä—è–º–æ–π:</strong> ${distance} –∫–º</p>
                    <p style="margin: 5px 0; font-size: 12px; color: #666;">‚ö†Ô∏è –ü–æ–∫–∞–∑–∞–Ω–æ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</p>
                </div>
            </div>
        `;
    }

    clearRoute() {
        console.log('üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞');
        
        // –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–ª–æ–∏
        this.routeLayer.clearLayers();
        this.markersLayer.clearLayers();
        
        // –û—á–∏—â–∞–µ–º –ø–æ–ª—è
        this.routeFrom.value = '';
        this.routeTo.value = '';
        this.routeInfo.innerHTML = '';
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        this.fromCoords = null;
        this.toCoords = null;
        this.viaCoords = [];
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º –≤—ã–±–æ—Ä–∞
        this.resetPickingMode();
        
        console.log('‚úÖ –ú–∞—Ä—à—Ä—É—Ç –æ—á–∏—â–µ–Ω');
    }

    addViaPoint() {
        console.log('‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π —Ç–æ—á–∫–∏');
        // –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–≥–ª—É—à–∫—É
        alert('üöß –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏');
    }
}
