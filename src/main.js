// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã —Å –±–∞–∑–æ–≤—ã–º–∏ —Å–ª–æ—è–º–∏
var osmLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
});

var googleHybrid = L.tileLayer('https://{s}.google.com/vt/lyrs=s,h&x={x}&y={y}&z={z}', {
    attribution: 'Google –ì–∏–±—Ä–∏–¥',
    subdomains: ['mt0', 'mt1', 'mt2', 'mt3'],
});

var googleSat = L.tileLayer('https://{s}.google.com/vt/lyrs=s&x={x}&y={y}&z={z}', {
    attribution: 'Google –°–ø—É—Ç–Ω–∏–∫',
    subdomains: ['mt0', 'mt1', 'mt2', 'mt3'],
});

var yandexSat = L.yandex('satellite', {
    attribution: '–Ø–Ω–¥–µ–∫—Å –°–ø—É—Ç–Ω–∏–∫'
});

var yandexMap = L.yandex('map', {
    attribution: '–Ø–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç—ã',
});

function traffic() {
    var trafficProvider = new ymaps.traffic.provider.Actual({}, {
        infoLayerShown: true
    });
    trafficProvider.setMap(this._yandex);
};

L.Yandex.addInitHook('on','load', function(){
    this._setStyle(this._yandex.controls.getContainer(), {
        right: '60px',
        top: '11px',
        width: 'auto'
    });
});

function trafficControl(){
    this._yandex.controls
        .add('trafficControl', {size: 'auto'})
        .get('trafficControl').state.set('trafficShow', true)
};

// –°–æ–∑–¥–∞–µ–º —Å–ª–æ–∏ –Ø–Ω–¥–µ–∫—Å –ü—Ä–æ–±–æ–∫
var yandexTraffic = L.yandex('overlay', {
    attribution: '–î–∞–Ω–Ω—ã–µ –¥–æ—Ä–æ–∂–Ω–æ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∏ Yandex',
}).on('load', traffic);

var yandexTrafficControl = L.yandex('overlay', {
    attribution: '–î–∞–Ω–Ω—ã–µ –¥–æ—Ä–æ–∂–Ω–æ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∏ Yandex',
}).on('load', trafficControl);


var baseLayers = {
    "OpenStreetMap": osmLayer,
    "Google –ì–∏–±—Ä–∏–¥": googleHybrid,
    "Google –°–ø—É—Ç–Ω–∏–∫": googleSat,
    "Yandex –ö–∞—Ä—Ç–∞": yandexMap,
    "Yandex –°–ø—É—Ç–Ω–∏–∫": yandexSat
};
var overlayLayers = {
    '–Ø–Ω–¥–µ–∫—Å –ø—Ä–æ–±–∫–∏': yandexTrafficControl,
};



var myMap = L.map('map', {
    center: [55.751244, 37.618423],
    zoom: 12,
    layers: [osmLayer],
    zoomControl: false
});

// –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—ã –≤ –ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª
L.control.zoom({
    position: 'bottomright'
}).addTo(myMap);

// –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Å–ª–æ–µ–≤
L.control.layers(baseLayers, overlayLayers, {
    position: 'topright'
}).addTo(myMap);

// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞
var coordControl = L.control({position: 'bottomright'});

coordControl.onAdd = function(map) {
    var container = L.DomUtil.create('div', 'coord-button-container');
    var btn = L.DomUtil.create('button', 'coord-button', container);
    btn.innerHTML = '‚åñ';
    var coordModeActive = false;
    var clickHandler = null;
    
    L.DomEvent.on(btn, 'click', function() {
        coordModeActive = !coordModeActive;
        
        if (coordModeActive) {
            btn.style.backgroundColor = '#4CAF50';
            btn.style.color = 'white';
            
            clickHandler = function(e) {
                var coords = e.latlng;
                var lat = coords.lat.toFixed(6);
                var lng = coords.lng.toFixed(6);
                
                // –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π popup –∫–∞–∫ –≤ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
                const popupContent = `
                    <div style="text-align: center; padding: 5px;">
                        <h3 style="margin: 0 0 10px 0; color: #2196F3;">üéØ –í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–æ—á–∫–∞</h3>
                        <p style="margin: 5px 0;"><strong>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</strong><br>${lat}, ${lng}</p>
                        <div style="display: flex; gap: 5px; margin-top: 8px; flex-wrap: wrap; justify-content: center;">
                            <button onclick="copyCoordinates('${lat}, ${lng}')" 
                                    style="padding: 5px 8px; background: #4CAF50; color: white; border: none; border-radius: 3px; cursor: pointer; font-size: 12px;">
                                üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                            </button>
                            <button onclick="setAsStartPoint(${lat}, ${lng})" 
                                    style="padding: 5px 8px; background: #2196F3; color: white; border: none; border-radius: 3px; cursor: pointer; font-size: 12px;">
                                üöÄ –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞
                            </button>
                            <button onclick="setAsEndPoint(${lat}, ${lng})" 
                                    style="padding: 5px 8px; background: #FF9800; color: white; border: none; border-radius: 3px; cursor: pointer; font-size: 12px;">
                                üèÅ –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞
                            </button>
                        </div>
                    </div>
                `;
                
                L.popup()
                    .setLatLng(coords)
                    .setContent(popupContent)
                    .openOn(map);
            };
            
            map.on('click', clickHandler);
        } else {
            btn.style.backgroundColor = '#fff';
            btn.style.color = 'black';
            if (clickHandler) {
                map.off('click', clickHandler);
            }
            map.closePopup();
        }
    });
    
    return container;
};

coordControl.addTo(myMap);


// –£–¥–∞–ª–µ–Ω–æ: –∫–Ω–æ–ø–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ IP (–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)

// –£–¥–∞–ª–µ–Ω–æ: —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ IP (–Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç)




// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª—å—é
document.addEventListener('DOMContentLoaded', function() {
    const expandBtn = document.getElementById('expandBtn');
    const sidePanel = document.getElementById('sidePanel');
    const closePanel = document.getElementById('closePanel');
    
    // –û—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏
    expandBtn.addEventListener('click', function() {
        sidePanel.classList.toggle('open');
        this.textContent = sidePanel.classList.contains('open') ? '√ó' : '‚â°';
        myMap.invalidateSize();
    });
    
    closePanel.addEventListener('click', function() {
        sidePanel.classList.remove('open');
        expandBtn.textContent = '‚â°';
        myMap.invalidateSize();
    });
    
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
    document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const tabId = this.getAttribute('data-tab');
            
            // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
            document.querySelectorAll('.tab-btn').forEach(b => b.classList.remove('active'));
            document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
            this.classList.add('active');
            document.getElementById(`${tabId}Tab`).classList.add('active');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–∞—Ä—Ç—ã
            setTimeout(() => myMap.invalidateSize(), 100);
        });
    });
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
    window.searchController = new SearchController(myMap);
    window.routeController = new RouteController(myMap);
    window.themesController = new ThemesController(myMap);
    initThemeTab();
    addGeolocationButton();
    // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏
    if (localStorage.getItem('locationRequested') !== 'true') {
        setTimeout(() => {
            if (confirm("–•–æ—Ç–∏—Ç–µ —Ä–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∫–∞—Ä—Ç—ã?")) {
                locateUser();
            }
            localStorage.setItem('locationRequested', 'true');
        }, 3000);
    }
});

function initThemeTab() {
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    setTimeout(() => {
        const themeButtons = document.getElementById('themeButtons');
        const themeRadius = document.getElementById('themeRadius');
        const addThemeBtn = document.getElementById('addThemeBtn');
        const addThemeForm = document.getElementById('addThemeForm');
        const submitTheme = document.getElementById('submitTheme');
        
        if (!themeButtons || !window.themesController) {
            console.warn('‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç—ã —Ç–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...');
            setTimeout(initThemeTab, 500);
            return;
        }
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–Ω–æ–ø–∫–∏
        themeButtons.innerHTML = '';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–µ–º—ã
        if (window.themesController && window.themesController.baseThemes) {
            window.themesController.baseThemes.forEach(theme => {
                const btn = document.createElement('button');
                btn.className = 'theme-btn';
                btn.textContent = theme.name;
                btn.addEventListener('click', () => {
                    const radius = parseInt(themeRadius.value) || 5;
                    window.themesController.loadTheme(theme, radius);
                });
                themeButtons.appendChild(btn);
            });
            console.log('‚úÖ –¢–µ–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã:', window.themesController.baseThemes.length);
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º—ã
        if (addThemeBtn && addThemeForm) {
            addThemeBtn.addEventListener('click', () => {
                addThemeForm.style.display = addThemeForm.style.display === 'none' ? 'block' : 'none';
            });
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ç–µ–º—ã
        if (submitTheme) {
            submitTheme.addEventListener('click', () => {
                const name = document.getElementById('themeName').value;
                const geojsonText = document.getElementById('themeGeoJSON').value;
                
                try {
                    const geojson = JSON.parse(geojsonText);
                    const newTheme = window.themesController.addCustomTheme(name, geojson);
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–æ–≤–æ–π —Ç–µ–º—ã
                    const btn = document.createElement('button');
                    btn.className = 'theme-btn';
                    btn.textContent = newTheme.name;
                    btn.addEventListener('click', () => {
                        window.themesController.loadCustomTheme(newTheme);
                    });
                    themeButtons.appendChild(btn);
                    
                    // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
                    document.getElementById('themeName').value = '';
                    document.getElementById('themeGeoJSON').value = '';
                    addThemeForm.style.display = 'none';
                } catch (e) {
                    alert('–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ GeoJSON: ' + e.message);
                }
            });
        }
    }, 100);
}

// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
function addGeolocationButton() {
    const geolocationControl = L.control({position: 'bottomright'});

    geolocationControl.onAdd = function(map) {
        const container = L.DomUtil.create('div', 'geolocation-button-container');
        const btn = L.DomUtil.create('button', 'geolocation-button', container);
        btn.innerHTML = 'üìç';
        btn.title = '–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–æ—ë —Ç–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ';
        
        L.DomEvent.on(btn, 'click', function() {
            // –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
            btn.style.backgroundColor = '#3388ff';
            btn.style.color = 'white';
            locateUser();
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∏–¥ –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                btn.style.backgroundColor = '';
                btn.style.color = '';
            }, 2000);
        });
        
        return container;
    };

    geolocationControl.addTo(myMap);
}

// –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
function locateUser() {
    console.log('üîç –ó–∞–ø—É—â–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è');
    
    if (!navigator.geolocation) {
        console.error('‚ùå –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä–æ–º');
        alert('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º');
        return;
    }

    console.log('‚úÖ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∑–∞–ø—É—Å–∫–∞–µ–º...');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    if (myMap && myMap.spin) {
        myMap.spin(true);
        console.log('üîÑ –í–∫–ª—é—á–µ–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏');
    }
    
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –µ—Å–ª–∏ spin –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    const loadingPopup = L.popup()
        .setLatLng(myMap.getCenter())
        .setContent(`
            <div style="text-align: center; padding: 10px;">
                <div style="font-size: 20px;">üîÑ</div>
                <p>–û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ...</p>
            </div>
        `)
        .openOn(myMap);
    
    navigator.geolocation.getCurrentPosition(
        function(position) {
            console.log('‚úÖ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ:', position);
            
            // –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏
            if (myMap && myMap.spin) {
                myMap.spin(false);
            }
            myMap.closePopup(loadingPopup);
            
            const userLocation = [position.coords.latitude, position.coords.longitude];
            const accuracy = Math.round(position.coords.accuracy);
            
            console.log('üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:', userLocation, '–¢–æ—á–Ω–æ—Å—Ç—å:', accuracy);
            
            // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã
            if (window.userLocationMarker) {
                myMap.removeLayer(window.userLocationMarker);
                console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–∞—Ä–∫–µ—Ä');
            }
            if (window.accuracyCircle) {
                myMap.removeLayer(window.accuracyCircle);
                console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫—Ä—É–≥ —Ç–æ—á–Ω–æ—Å—Ç–∏');
            }
            
            // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –º–∞—Ä–∫–µ—Ä (—Å–Ω–∞—á–∞–ª–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π)
            try {
                window.userLocationMarker = L.marker(userLocation).addTo(myMap);
                console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–∞—Ä–∫–µ—Ä');
                
                // –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–º–µ–Ω–∏—Ç—å –∏–∫–æ–Ω–∫—É
                try {
                    window.userLocationMarker.setIcon(L.icon({
                        iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png',
                        iconSize: [25, 41],
                        iconAnchor: [12, 41],
                        popupAnchor: [1, -34]
                    }));
                    console.log('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫—Ä–∞—Å–Ω–∞—è –∏–∫–æ–Ω–∫–∞');
                } catch (iconError) {
                    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—Ä–∞—Å–Ω—É—é –∏–∫–æ–Ω–∫—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é:', iconError);
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä—É–≥ —Ç–æ—á–Ω–æ—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if (accuracy > 100) {
                    try {
                        window.accuracyCircle = L.circle(userLocation, {
                            radius: accuracy,
                            color: '#3388ff',
                            fillColor: '#3388ff',
                            fillOpacity: 0.1,
                            weight: 2
                        }).addTo(myMap);
                        console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫—Ä—É–≥ —Ç–æ—á–Ω–æ—Å—Ç–∏');
                    } catch (circleError) {
                        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫—Ä—É–≥ —Ç–æ—á–Ω–æ—Å—Ç–∏:', circleError);
                    }
                }
                
                // –°–æ–∑–¥–∞–µ–º popup
                const popupContent = `
                    <div style="text-align: center; padding: 5px;">
                        <h3 style="margin: 0 0 10px 0; color: #2196F3;">üìç –í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</h3>
                        <p style="margin: 5px 0;"><strong>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</strong><br>${userLocation[0].toFixed(6)}, ${userLocation[1].toFixed(6)}</p>
                        <p style="margin: 5px 0;"><strong>–¢–æ—á–Ω–æ—Å—Ç—å:</strong> ¬±${accuracy} –º–µ—Ç—Ä–æ–≤</p>
                        <div style="display: flex; gap: 5px; margin-top: 8px; flex-wrap: wrap; justify-content: center;">
                            <button onclick="copyCoordinates('${userLocation[0].toFixed(6)}, ${userLocation[1].toFixed(6)}')" 
                                    style="padding: 5px 8px; background: #4CAF50; color: white; border: none; border-radius: 3px; cursor: pointer; font-size: 12px;">
                                üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                            </button>
                            <button onclick="setAsStartPoint(${userLocation[0]}, ${userLocation[1]})" 
                                    style="padding: 5px 8px; background: #2196F3; color: white; border: none; border-radius: 3px; cursor: pointer; font-size: 12px;">
                                üöÄ –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞
                            </button>
                            <button onclick="setAsEndPoint(${userLocation[0]}, ${userLocation[1]})" 
                                    style="padding: 5px 8px; background: #FF9800; color: white; border: none; border-radius: 3px; cursor: pointer; font-size: 12px;">
                                üèÅ –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞
                            </button>
                        </div>
                    </div>
                `;
                
                window.userLocationMarker.bindPopup(popupContent).openPopup();
                console.log('‚úÖ Popup –ø—Ä–∏–≤—è–∑–∞–Ω –∏ –æ—Ç–∫—Ä—ã—Ç');
                
                // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É
                const zoomLevel = accuracy > 1000 ? 12 : accuracy > 500 ? 14 : 16;
                myMap.flyTo(userLocation, zoomLevel);
                console.log('‚úÖ –ö–∞—Ä—Ç–∞ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞', userLocation, '—Å –∑—É–º–æ–º', zoomLevel);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                setTimeout(() => {
                    alert(`‚úÖ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ!\n–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${userLocation[0].toFixed(6)}, ${userLocation[1].toFixed(6)}\n–¢–æ—á–Ω–æ—Å—Ç—å: ¬±${accuracy} –º–µ—Ç—Ä–æ–≤`);
                }, 500);
                
            } catch (markerError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Ä–∫–µ—Ä–∞:', markerError);
                alert(`–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã: ${userLocation[0].toFixed(6)}, ${userLocation[1].toFixed(6)}\n–ù–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–∞—Ä–∫–µ—Ä –Ω–∞ –∫–∞—Ä—Ç–µ.`);
            }
        },
        function(error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error);
            
            // –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏
            if (myMap && myMap.spin) {
                myMap.spin(false);
            }
            myMap.closePopup(loadingPopup);
            
            let errorMessage = '';
            
            switch(error.code) {
                case error.PERMISSION_DENIED:
                    errorMessage = "–î–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –∏ —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é.";
                    console.error('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
                    break;
                case error.POSITION_UNAVAILABLE:
                    errorMessage = "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –≤–∫–ª—é—á–∏—Ç–µ GPS.";
                    console.error('üì° –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
                    break;
                case error.TIMEOUT:
                    errorMessage = "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
                    console.error('‚è∞ –¢–∞–π–º-–∞—É—Ç');
                    break;
                default:
                    errorMessage = `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`;
                    console.error('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
                    break;
            }
            
            alert(`‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:\n${errorMessage}`);
            
            // –¢–∞–∫–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º popup —Å –æ—à–∏–±–∫–æ–π
            L.popup()
                .setLatLng(myMap.getCenter())
                .setContent(`
                    <div style="padding: 15px; text-align: center; max-width: 300px;">
                        <h3 style="color: #f44336; margin: 0 0 10px 0;">‚ùå –û—à–∏–±–∫–∞</h3>
                        <p>${errorMessage}</p>
                        <button onclick="locateUser()" style="padding: 5px 10px; background: #2196F3; color: white; border: none; border-radius: 3px; cursor: pointer;">
                            üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                        </button>
                    </div>
                `)
                .openOn(myMap);
        },
        {
            enableHighAccuracy: true,
            timeout: 15000,
            maximumAge: 30000  // –£–º–µ–Ω—å—à–∏–ª –∫–µ—à –¥–æ 30 —Å–µ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        }
    );
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
function copyCoordinates(coords) {
    if (navigator.clipboard) {
        navigator.clipboard.writeText(coords).then(function() {
            alert('üìã –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã: ' + coords);
        }).catch(function() {
            alert('üìã –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ' + coords + '\n(–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤—Ä—É—á–Ω—É—é)');
        });
    } else {
        alert('üìã –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ' + coords + '\n(–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤—Ä—É—á–Ω—É—é)');
    }
}

// –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞
function setAsStartPoint(lat, lng) {
    if (window.routeController) {
        const coords = L.latLng(lat, lng);
        const displayName = `–ú–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (${lat.toFixed(6)}, ${lng.toFixed(6)})`;
        window.routeController.setPoint('from', coords, displayName);
        alert('üöÄ –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!');
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º popup
        myMap.closePopup();
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –º–∞—Ä—à—Ä—É—Ç–æ–≤
        openRoutingTab();
    } else {
        alert('‚ùå –°–∏—Å—Ç–µ–º–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    }
}

// –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞
function setAsEndPoint(lat, lng) {
    if (window.routeController) {
        const coords = L.latLng(lat, lng);
        const displayName = `–í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–æ—á–∫–∞ (${lat.toFixed(6)}, ${lng.toFixed(6)})`;
        window.routeController.setPoint('to', coords, displayName);
        alert('üèÅ –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!');
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º popup
        myMap.closePopup();
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –º–∞—Ä—à—Ä—É—Ç–æ–≤
        openRoutingTab();
    } else {
        alert('‚ùå –°–∏—Å—Ç–µ–º–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–∫–ª–∞–¥–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤
function openRoutingTab() {
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
    const sidePanel = document.getElementById('sidePanel');
    const expandBtn = document.getElementById('expandBtn');
    if (!sidePanel.classList.contains('open')) {
        sidePanel.classList.add('open');
        expandBtn.textContent = '√ó';
    }
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É –º–∞—Ä—à—Ä—É—Ç–æ–≤
    document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
    document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
    
    const routingTabBtn = document.querySelector('[data-tab="routing"]');
    const routingTab = document.getElementById('routingTab');
    
    if (routingTabBtn && routingTab) {
        routingTabBtn.classList.add('active');
        routingTab.classList.add('active');
    }
    
    setTimeout(() => myMap.invalidateSize(), 100);
}